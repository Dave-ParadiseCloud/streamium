generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  email           String?       @unique
  passwordHash    String
  resetToken      String?
  resetTokenExp   DateTime?
  isAdmin         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  watchlist       Watchlist[]
  comments        Comment[]
  commentLikes    CommentLike[]

  @@map("users")
}

model Watchlist {
  id          Int      @id @default(autoincrement())
  userId      Int
  mediaId     Int
  mediaType   String
  title       String
  posterPath  String?
  voteAverage Float    @default(0)
  addedAt     DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId, mediaType])
  @@map("watchlist")
}

model Comment {
  id          Int           @id @default(autoincrement())
  userId      Int
  mediaId     Int
  mediaType   String
  season      Int?
  episode     Int?
  content     String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parentId    Int?
  flagged     Boolean      @default(false)
  flagReason  String?      @db.Text
  flaggedAt   DateTime?
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Comment?     @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[]    @relation("CommentReplies")
  likes       CommentLike[]

  @@index([mediaId, mediaType])
  @@index([mediaId, mediaType, season, episode])
  @@index([userId])
  @@index([parentId])
  @@index([flagged])
  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model ImageCache {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  path      String
  format    String
  width     Int?
  height    Int?
  quality   Int
  createdAt DateTime @default(now())
  accessedAt DateTime @default(now())

  @@index([url])
  @@map("image_cache")
}
